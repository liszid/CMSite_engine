<?php

declare(strict_types=1);

namespace Queries\qDatabase\oracle;

interface CREATE
{
    const CREATE = [
        0 => "
            CREATE TABLE User (
                userId NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
                userName VARCHAR2(32) NOT NULL UNIQUE,
                pWord VARCHAR2(32) NOT NULL,
                userFirstName VARCHAR2(64) NULL,
                userLastName VARCHAR2(64) NULL,
                userContEmail VARCHAR2(128) NOT NULL UNIQUE,
                userContPhone VARCHAR2(32) NULL,
                userContSite VARCHAR2(64) NULL,
                userThumbnail VARCHAR2(255) DEFAULT 'user',
                userDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                isDelete NUMBER(1) DEFAULT 1,
                CONSTRAINT PKUser PRIMARY KEY (userId),
                CONSTRAINT userUserIdUnique UNIQUE (userId),
                CONSTRAINT userUserNameUnique UNIQUE (userName),
                CONSTRAINT userUserContEmailUnique UNIQUE (userContEmail)
            );",
        1 => "
            CREATE TABLE Group (
                groupId NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
                groupName VARCHAR2(32) NOT NULL,
                groupDesc VARCHAR2(256) NOT NULL,
                canAdministrative NUMBER(1) DEFAULT 0,
                mngGroups NUMBER(1) DEFAULT 0,
                mngHuntgroups NUMBER(1) DEFAULT 0,
                mngUsers NUMBER(1) DEFAULT 0,
                mngTools NUMBER(1) DEFAULT 0,
                canUsers NUMBER(1) DEFAULT 0,
                canEdit NUMBER(1) DEFAULT 0,
                canLogin NUMBER(1) DEFAULT 0,
                isDelete NUMBER(1) DEFAULT 1,
                CONSTRAINT primaryKeyGroup PRIMARY KEY (groupId),
                CONSTRAINT groupGroupIdUnique UNIQUE (groupId),
                CONSTRAINT groupGroupNameUnique UNIQUE (groupName)
            );",
        2 => "
            CREATE TABLE Group_Member (
                groupMemberId NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
                userId NUMBER(6) NOT NULL,
                groupId NUMBER(6) NOT NULL,
                isDelete NUMBER(6) DEFAULT 1,
                CONSTRAINT primaryKeyGroup_Member PRIMARY KEY (groupMemberId),
                CONSTRAINT groupMemberGroupCascade FOREIGN KEY (groupId) REFERENCES Group (groupId) ON DELETE CASCADE,
                CONSTRAINT groupMemberUserCascade FOREIGN KEY (userId) REFERENCES User (userId) ON DELETE CASCADE
            );",
        3 => "
            CREATE TABLE Huntgroup (
                huntgroupId NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
                huntgroupName VARCHAR2(32) NOT NULL,
                huntgroupDesc VARCHAR2(256) NOT NULL,
                isDelete NUMBER(6) DEFAULT 1,
                CONSTRAINT primaryKeyHuntroup PRIMARY KEY (huntgroupId)
            );",
        4 => "
            CREATE TABLE Huntgroup_Member (
                huntgroupMemberId NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
                userId NUMBER(6) NOT NULL,
                huntgroupId NUMBER(6) NOT NULL,
                isDelete NUMBER(6) DEFAULT 1,
                CONSTRAINT primaryKeyHuntgroup_Member PRIMARY KEY (huntgroupMemberId),
                CONSTRAINT huntgroupMemberGroupCascade FOREIGN KEY (huntgroupId) REFERENCES Huntgroup (huntgroupId) ON DELETE CASCADE,
                CONSTRAINT huntgroupMemberUserCascade FOREIGN KEY (userId) REFERENCES User (userId) ON DELETE CASCADE
            );",
        10 => "
            CREATE TABLE SYM (
                symid VARCHAR2(255) PRIMARY KEY
            );",
        11 => "
           CREATE TABLE SRP (
                srp_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                symid VARCHAR2(255),
                name VARCHAR2(255),
                physical_capacity NUMBER,
                usable_capacity NUMBER,
                compression_state VARCHAR2(255),
                srdf_dse_allocated NUMBER,
                snapshot_effective_capacity NUMBER,
                snapshots_allocated NUMBER,
                provisioned_capacity_gigabytes NUMBER,
                subscribed_capacity_gigabytes NUMBER,
                effective_used_gigabytes NUMBER,
                allocated_capacity_gigabytes NUMBER,
                physical_used_gigabytes NUMBER,
                used_capacity_gigabytes NUMBER,
                unreducible_used_cap_gigabytes NUMBER,
                snap_effective_used_gigabytes NUMBER,
                snap_capacity_gigabytes NUMBER,
                snap_physical_used_gigabytes NUMBER,
                snap_used_capacity_gigabytes NUMBER,
                snap_unreducible_used_cap_gigabytes NUMBER,
                CONSTRAINT fk_symid FOREIGN KEY (symid) REFERENCES SYM(symid)
            );",
        12 => "
            CREATE TABLE SG (
                sg_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                srp_id NUMBER,
                sg_name VARCHAR2(255),
                provisioned_capacity NUMBER,
                subscribed_capacity NUMBER,
                user_data NUMBER,
                total_effective_used NUMBER,
                total_physical_used NUMBER,
                total_unreducible_used NUMBER,
                snap_effective_used NUMBER,
                snap_allocated_capacity NUMBER,
                snap_physical_used NUMBER,
                snap_used_capacity NUMBER,
                snap_unreducible_used_cap NUMBER,
                CONSTRAINT fk_srp_id FOREIGN KEY (srp_id) REFERENCES SRP(srp_id)
            );",
        90 => "
            CREATE TABLE Log (
                logId NUMBER(6) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL,
                logType VARCHAR2(64) NULL,
                logAction VARCHAR2(64) NULL,
                logCategory VARCHAR2(64) NULL,
                logText CLOB NULL,
                logBool VARCHAR2(16) NULL,
                logDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
                userId NUMBER(6) NOT NULL,
                isDelete NUMBER(1) DEFAULT 1,
                CONSTRAINT primaryKeyLog PRIMARY KEY (logId),
                CONSTRAINT logUserCascade FOREIGN KEY (userId) REFERENCES User (userId) ON DELETE CASCADE
            );",
    ];
}
?>
